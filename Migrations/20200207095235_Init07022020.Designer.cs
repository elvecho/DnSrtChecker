// <auto-generated />
using System;
using DnSrtChecker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DnSrtCheckerLib.Migrations
{
    [DbContext(typeof(RT_ChecksContext))]
    [Migration("20200207095235_Init07022020")]
    partial class Init07022020
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DnSrtCheckerLib.Models.DocumentType", b =>
                {
                    b.Property<int>("LDocumentTypeId")
                        .HasColumnName("lDocumentTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<string>("SzDescription")
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LDocumentTypeId");

                    b.ToTable("Document_Type","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.IndexMaintenance", b =>
                {
                    b.Property<DateTime>("DDate")
                        .HasColumnName("dDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SzDbName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SzSchemaName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzTableName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SzIndexName")
                        .HasColumnName("szIndexName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<double?>("LPostPercFragmentation")
                        .HasColumnName("lPostPercFragmentation")
                        .HasColumnType("float");

                    b.Property<double?>("LPrePercFragmentation")
                        .HasColumnName("lPrePercFragmentation")
                        .HasColumnType("float");

                    b.Property<string>("SzActionToDo")
                        .HasColumnName("szActionToDo")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("DDate", "SzDbName", "SzSchemaName", "SzTableName", "SzIndexName");

                    b.ToTable("IndexMaintenance","LOGGING");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServer", b =>
                {
                    b.Property<string>("SzRtServerId")
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LRetailStoreId")
                        .HasColumnName("lRetailStoreID")
                        .HasColumnType("int");

                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<bool?>("BOnDutyFlag")
                        .HasColumnName("bOnDutyFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<string>("SzIpAddress")
                        .HasColumnName("szIpAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SzLocation")
                        .HasColumnName("szLocation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SzPassword")
                        .HasColumnName("szPassword")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SzUsername")
                        .HasColumnName("szUsername")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SzRtServerId", "LRetailStoreId", "LStoreGroupId");

                    b.HasIndex("LRetailStoreId", "LStoreGroupId");

                    b.ToTable("RtServer","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerStatus", b =>
                {
                    b.Property<string>("SzRtServerId")
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LRetailStoreId")
                        .HasColumnName("lRetailStoreID")
                        .HasColumnType("int");

                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<bool?>("BOnErrorFlag")
                        .HasColumnName("bOnErrorFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("BRunningTransmissionFlag")
                        .HasColumnName("bRunningTransmissionFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("BVatVentilationFlag")
                        .HasColumnName("bVatVentilationFlag")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DGrandTotalAmount")
                        .HasColumnName("dGrandTotalAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtLastDateTimeCollected")
                        .HasColumnName("dtLastDateTimeCollected")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtLastDateTimeRead")
                        .HasColumnName("dtLastDateTimeRead")
                        .HasColumnType("datetime");

                    b.Property<short?>("LLastClosureNmbr")
                        .HasColumnName("lLastClosureNmbr")
                        .HasColumnType("smallint");

                    b.Property<short?>("LMemoryAvailable")
                        .HasColumnName("lMemoryAvailable")
                        .HasColumnType("smallint");

                    b.Property<short?>("LPendingTransmissionDays")
                        .HasColumnName("lPendingTransmissionDays")
                        .HasColumnType("smallint");

                    b.Property<short?>("LPendingTransmissionNmbr")
                        .HasColumnName("lPendingTransmissionNmbr")
                        .HasColumnType("smallint");

                    b.Property<short?>("LTransmissionScheduleHoursRepeat")
                        .HasColumnName("lTransmissionScheduleHoursRepeat")
                        .HasColumnType("smallint");

                    b.Property<short?>("LTransmissionScheduleMinutesLeft")
                        .HasColumnName("lTransmissionScheduleMinutesLeft")
                        .HasColumnType("smallint");

                    b.Property<string>("SzErrorDescription")
                        .HasColumnName("szErrorDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SzLastCloseResult")
                        .HasColumnName("szLastCloseResult")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("SzRtServerId", "LRetailStoreId", "LStoreGroupId")
                        .HasName("PK_ServerRt_Status");

                    b.ToTable("RtServer_Status","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmission", b =>
                {
                    b.Property<string>("SzRtServerId")
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LRtServerOperationId")
                        .HasColumnName("lRtServerOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.HasKey("SzRtServerId", "LRtServerOperationId")
                        .HasName("PK_ServerRt_Transmission");

                    b.ToTable("RtServer_Transmission","TRX");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetail", b =>
                {
                    b.Property<string>("SzRtServerId")
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LRtServerOperationId")
                        .HasColumnName("lRtServerOperationID")
                        .HasColumnType("int");

                    b.Property<int>("LRtDeviceTransmissionId")
                        .HasColumnName("lRtDeviceTransmissionID")
                        .HasColumnType("int");

                    b.Property<string>("SzRtDeviceId")
                        .HasColumnName("szRtDeviceID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DRtDeviceClosureDateTime")
                        .HasColumnName("dRtDeviceClosureDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DRtInactivityDateTimeFrom")
                        .HasColumnName("dRtInactivityDateTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DRtInactivityDateTimeTo")
                        .HasColumnName("dRtInactivityDateTimeTo")
                        .HasColumnType("datetime");

                    b.Property<string>("SzRtDeviceType")
                        .HasColumnName("szRtDeviceType")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SzRtTransmissionFormat")
                        .HasColumnName("szRtTransmissionFormat")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("SzRtServerId", "LRtServerOperationId", "LRtDeviceTransmissionId", "SzRtDeviceId");

                    b.ToTable("RtServer_TransmissionDetail","TRX");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetailRtData", b =>
                {
                    b.Property<int>("LRtDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lRtDataID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("BVatVentilation")
                        .HasColumnName("bVatVentilation")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DReturnAmount")
                        .HasColumnName("dReturnAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DSaleAmount")
                        .HasColumnName("dSaleAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DVatAmount")
                        .HasColumnName("dVatAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal>("DVatRate")
                        .HasColumnName("dVatRate")
                        .HasColumnType("decimal(6, 4)");

                    b.Property<decimal?>("DVoidAmount")
                        .HasColumnName("dVoidAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<int>("LRtDeviceTransmissionId")
                        .HasColumnName("lRtDeviceTransmissionID")
                        .HasColumnType("int");

                    b.Property<int>("LRtServerOperationId")
                        .HasColumnName("lRtServerOperationID")
                        .HasColumnType("int");

                    b.Property<string>("SzRtDeviceId")
                        .IsRequired()
                        .HasColumnName("szRtDeviceID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzRtServerId")
                        .IsRequired()
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzVatLegalReference")
                        .HasColumnName("szVatLegalReference")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SzVatNature")
                        .HasColumnName("szVatNature")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("LRtDataId")
                        .HasName("PK_ServerRT_TransmissionDetail_RtData");

                    b.HasIndex("SzRtServerId", "LRtServerOperationId", "LRtDeviceTransmissionId", "SzRtDeviceId");

                    b.ToTable("RtServer_TransmissionDetail_RtData","TRX");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetailRtReport", b =>
                {
                    b.Property<int>("LRtReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lRtReportID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<int>("LRtDeviceTransmissionId")
                        .HasColumnName("lRtDeviceTransmissionID")
                        .HasColumnType("int");

                    b.Property<int>("LRtServerOperationId")
                        .HasColumnName("lRtServerOperationID")
                        .HasColumnType("int");

                    b.Property<string>("SzEventDateTime")
                        .HasColumnName("szEventDateTime")
                        .HasColumnType("varchar(19)")
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<string>("SzEventNote")
                        .HasColumnName("szEventNote")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SzEventType")
                        .HasColumnName("szEventType")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SzRtDeviceId")
                        .IsRequired()
                        .HasColumnName("szRtDeviceID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzRtServerId")
                        .IsRequired()
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LRtReportId")
                        .HasName("PK_ServerRt_Report");

                    b.HasIndex("SzRtServerId", "LRtServerOperationId", "LRtDeviceTransmissionId", "SzRtDeviceId");

                    b.ToTable("RtServer_TransmissionDetail_RtReport","TRX");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.Store", b =>
                {
                    b.Property<int>("LRetailStoreId")
                        .HasColumnName("lRetailStoreID")
                        .HasColumnType("int");

                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<string>("SzDescription")
                        .IsRequired()
                        .HasColumnName("szDescription")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("LRetailStoreId", "LStoreGroupId");

                    b.HasIndex("LStoreGroupId");

                    b.ToTable("Store","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.StoreGroup", b =>
                {
                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<string>("SzDescription")
                        .IsRequired()
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LStoreGroupId")
                        .HasName("PK_StoreGroup");

                    b.ToTable("Store_Group","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionAffiliation", b =>
                {
                    b.Property<int>("LTransactionAffiliationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lTransactionAffiliationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BRtNonCompliantFlag")
                        .HasColumnName("bRtNonCompliantFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("BTransactionArchivedFlag")
                        .HasColumnName("bTransactionArchivedFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("BTransactionCheckedFlag")
                        .HasColumnName("bTransactionCheckedFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DPosTransactionTurnover")
                        .HasColumnName("dPosTransactionTurnover")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DRtTransactionTurnover")
                        .HasColumnName("dRtTransactionTurnover")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<DateTime?>("DtBusinessDate")
                        .HasColumnName("dtBusinessDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtRtDateTime")
                        .HasColumnName("dtRtDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LPosTaNmbr")
                        .HasColumnName("lPosTaNmbr")
                        .HasColumnType("int");

                    b.Property<int?>("LPosWorkstationNmbr")
                        .HasColumnName("lPosWorkstationNmbr")
                        .HasColumnType("int");

                    b.Property<int>("LRetailStoreId")
                        .HasColumnName("lRetailStoreID")
                        .HasColumnType("int");

                    b.Property<int?>("LRtClosureNmbr")
                        .HasColumnName("lRtClosureNmbr")
                        .HasColumnType("int");

                    b.Property<int?>("LRtDocumentNmbr")
                        .HasColumnName("lRtDocumentNmbr")
                        .HasColumnType("int");

                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("LTransactionMismatchId")
                        .HasColumnName("lTransactionMismatchID")
                        .HasColumnType("int");

                    b.Property<string>("SzRtDeviceId")
                        .HasColumnName("szRtDeviceID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzRtDocumentId")
                        .HasColumnName("szRtDocumentID")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("SzRtServerId")
                        .IsRequired()
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzTranscationCheckNote")
                        .HasColumnName("szTranscationCheckNote")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LTransactionAffiliationId");

                    b.HasIndex("LTransactionMismatchId");

                    b.HasIndex("SzRtServerId", "LRetailStoreId", "LStoreGroupId");

                    b.ToTable("Transaction_Affiliation","TRN");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionDocument", b =>
                {
                    b.Property<int>("LTransactionDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lTransactionDocumentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<int?>("LDocumentTypeId")
                        .HasColumnName("lDocumentTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("LTransactionAffiliationId")
                        .HasColumnName("lTransactionAffiliationID")
                        .HasColumnType("int");

                    b.Property<string>("SzDocumentAttachment")
                        .HasColumnName("szDocumentAttachment")
                        .HasColumnType("xml");

                    b.Property<string>("SzDocumentName")
                        .HasColumnName("szDocumentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SzDocumentNote")
                        .HasColumnName("szDocumentNote")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LTransactionDocumentId");

                    b.HasIndex("LDocumentTypeId");

                    b.HasIndex("LTransactionAffiliationId");

                    b.ToTable("Transaction_Document","TRN");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionMismatch", b =>
                {
                    b.Property<int>("LTransactionMismatchId")
                        .HasColumnName("lTransactionMismatchID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<string>("SzDescription")
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LTransactionMismatchId");

                    b.ToTable("Transaction_Mismatch","LOOKUP");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionRtError", b =>
                {
                    b.Property<int>("LRtErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lRtErrorID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtRtDateTime")
                        .HasColumnName("dtRtDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LRetailStoreId")
                        .HasColumnName("lRetailStoreID")
                        .HasColumnType("int");

                    b.Property<int?>("LRtClosureNmbr")
                        .HasColumnName("lRtClosureNmbr")
                        .HasColumnType("int");

                    b.Property<int?>("LRtDocumentNmbr")
                        .HasColumnName("lRtDocumentNmbr")
                        .HasColumnType("int");

                    b.Property<int>("LStoreGroupId")
                        .HasColumnName("lStoreGroupID")
                        .HasColumnType("int");

                    b.Property<string>("SzDescription")
                        .HasColumnName("szDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SzRtDeviceId")
                        .HasColumnName("szRtDeviceID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SzRtServerId")
                        .IsRequired()
                        .HasColumnName("szRtServerID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LRtErrorId");

                    b.HasIndex("SzRtServerId", "LRetailStoreId", "LStoreGroupId");

                    b.ToTable("Transaction_RtError","TRN");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionVat", b =>
                {
                    b.Property<int>("LTransactionAffiliationId")
                        .HasColumnName("lTransactionAffiliationID")
                        .HasColumnType("int");

                    b.Property<string>("SzVatCodeId")
                        .HasColumnName("szVatCodeID")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool?>("BVatCheckedFlag")
                        .HasColumnName("bVatCheckedFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("BVatMismatchFlag")
                        .HasColumnName("bVatMismatchFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DLastUpdateLocal")
                        .HasColumnName("dLastUpdateLocal")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DPosGrossAmount")
                        .HasColumnName("dPosGrossAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DPosNetAmount")
                        .HasColumnName("dPosNetAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DPosVatAmount")
                        .HasColumnName("dPosVatAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DPosVatRate")
                        .HasColumnName("dPosVatRate")
                        .HasColumnType("decimal(6, 4)");

                    b.Property<decimal?>("DRtGrossAmount")
                        .HasColumnName("dRtGrossAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DRtNetAmount")
                        .HasColumnName("dRtNetAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DRtVatAmount")
                        .HasColumnName("dRtVatAmount")
                        .HasColumnType("decimal(15, 4)");

                    b.Property<decimal?>("DRtVatRate")
                        .HasColumnName("dRtVatRate")
                        .HasColumnType("decimal(6, 4)");

                    b.HasKey("LTransactionAffiliationId", "SzVatCodeId");

                    b.ToTable("Transaction_Vat","TRN");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServer", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.Store", "L")
                        .WithMany("RtServer")
                        .HasForeignKey("LRetailStoreId", "LStoreGroupId")
                        .HasConstraintName("FK_RtServer_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerStatus", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.RtServer", "RtServer")
                        .WithOne("RtServerStatus")
                        .HasForeignKey("DnSrtCheckerLib.Models.RtServerStatus", "SzRtServerId", "LRetailStoreId", "LStoreGroupId")
                        .HasConstraintName("FK_RtServer_Status_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetail", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.RtServerTransmission", "RtServerTransmission")
                        .WithMany("RtServerTransmissionDetail")
                        .HasForeignKey("SzRtServerId", "LRtServerOperationId")
                        .HasConstraintName("FK_ServerRt_TransmissionDetail_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetailRtData", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.RtServerTransmissionDetail", "RtServerTransmissionDetail")
                        .WithMany("RtServerTransmissionDetailRtData")
                        .HasForeignKey("SzRtServerId", "LRtServerOperationId", "LRtDeviceTransmissionId", "SzRtDeviceId")
                        .HasConstraintName("FK_ServerRT_TransmissionDetail_RtData_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.RtServerTransmissionDetailRtReport", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.RtServerTransmissionDetail", "RtServerTransmissionDetail")
                        .WithMany("RtServerTransmissionDetailRtReport")
                        .HasForeignKey("SzRtServerId", "LRtServerOperationId", "LRtDeviceTransmissionId", "SzRtDeviceId")
                        .HasConstraintName("FK_ServerRt_TransmissionDetail_RtReport_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.Store", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.StoreGroup", "LStoreGroup")
                        .WithMany("Store")
                        .HasForeignKey("LStoreGroupId")
                        .HasConstraintName("FK_Store_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionAffiliation", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.TransactionMismatch", "LTransactionMismatch")
                        .WithMany("TransactionAffiliation")
                        .HasForeignKey("LTransactionMismatchId")
                        .HasConstraintName("FK_Transaction_Affiliation_#2");

                    b.HasOne("DnSrtCheckerLib.Models.RtServer", "RtServer")
                        .WithMany("TransactionAffiliation")
                        .HasForeignKey("SzRtServerId", "LRetailStoreId", "LStoreGroupId")
                        .HasConstraintName("FK_Transaction_Affiliation_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionDocument", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.DocumentType", "LDocumentType")
                        .WithMany("TransactionDocument")
                        .HasForeignKey("LDocumentTypeId")
                        .HasConstraintName("FK_Transaction_Document_#1");

                    b.HasOne("DnSrtCheckerLib.Models.TransactionAffiliation", "LTransactionAffiliation")
                        .WithMany("TransactionDocument")
                        .HasForeignKey("LTransactionAffiliationId")
                        .HasConstraintName("FK_Transaction_Document_#2");
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionRtError", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.RtServer", "RtServer")
                        .WithMany("TransactionRtError")
                        .HasForeignKey("SzRtServerId", "LRetailStoreId", "LStoreGroupId")
                        .HasConstraintName("FK_Transaction_RtError_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.TransactionVat", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.TransactionAffiliation", "LTransactionAffiliation")
                        .WithMany("TransactionVat")
                        .HasForeignKey("LTransactionAffiliationId")
                        .HasConstraintName("FK_Transaction_Vat_#1")
                        .IsRequired();
                });

            modelBuilder.Entity("DnSrtCheckerLib.Models.UserRole", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnSrtCheckerLib.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("DnSrtCheckerLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnSrtCheckerLib.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DnSrtCheckerLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
